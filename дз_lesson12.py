# class Tovar:#     def __init__(self, item_name, store_name, price):#         self._item_name = item_name#         self._store_name = store_name#         self._price = price##     def get_item_name(self):#         return self._item_name##     def get_store_name(self):#         return self._store_name##     def get_price(self):#         return self._price##     def set_price(self, new_price):#         self._price = new_price#         return self._price# class Sklad:#     def __init__(self):#         self._tovars = []##     def add_product(self, product):#         self._tovars.append(product)##     def find_product_by_index(self, index):#         if index < len(self._tovars):#             return self._tovars[index]#         return None##     def sort_by_name(self):#         self._tovars.sort(key=lambda x: x.get_item_name())##     def sort_by_store(self):#         self._tovars.sort(key=lambda x: x.get_store_name())##     def sort_by_price(self):#         self._tovars.sort(key=lambda x: x.get_price())##     def all_products(self):#         for prod in self._tovars:#             print(f'Product: {prod.get_item_name()}, Store: {prod.get_store_name()}, Price: {prod.get_price()}')# p1 = Tovar("Product1", "Store1", 10)# p2 = Tovar("Product2", "Store2", 20)# sklad = Sklad()# sklad.add_product(p1)# sklad.add_product(p2)# sklad.all_products()# class SuperStr(str):#     def is_repeatance(self, s):#         if len(self) % len(s) == 0:#             return s * (len(self) // len(s)) == self#         else:#             return False##     def is_palindrom(self):#         s = self.lower()#         return s == s[::-1]## s = SuperStr("ababab")# s2 = SuperStr("aba")# print(s.is_repeatance("ab"))# print(s.is_repeatance("ba"))# print(s2.is_palindrom())# print(s.is_palindrom())# class PheloSlon:#     def __init__(self, bee, elephant):#         self.bee = min(100, max(0, bee))#         self.elephant = min(100, max(0, elephant))##     def fly(self):#         if self.bee >= self.elephant:#             return True#         else:#             return False##     def trumpet(self):#         if self.elephant >= self.bee:#             return "tu-tu-doo-doo"#         else:#             return "wzzzz"##     def eat(self, meal, value):#         if meal == "nectar":#             self.elephant -= value#             self.bee = min(100, max(0, self.bee + value))#         elif meal == "grass":#             self.bee -= value#             self.elephant = min(100, max(0, self.elephant + value))## pheloslon = PheloSlon(30, 70)# print(pheloslon.fly())# print(pheloslon.trumpet())# pheloslon.eat("nectar", 20)# print(f"Bee: {pheloslon.bee}, Elephant: {pheloslon.elephant}")        # class Bus:#     def __init__(self, speed, max_seats, max_speed):#         self.speed = speed#         self.max_seats = max_seats#         self.max_speed = max_speed##     def increase_speed(self, value):#         self.speed += value#         if self.speed > self.max_speed:#             self.speed = self.max_speed##     def decrease_speed(self, value):#         self.speed -= value#         if self.speed < 0:#             self.speed = 0##     def add_passenger(self):#         if self.max_seats > 0:#             self.max_seats -= 1#         else:#             print("Bus is full, cannot add more passengers")##     def remove_passenger(self):#         if self.max_seats < self.max_speed:#             self.max_seats += 1#         else:#             print("No passengers to remove")#     def __add__(self, other):        